/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.induwara.dsaproject;

import java.time.Duration;
import java.time.Instant;
import java.util.Random;

/**
 *
 * @author induwara
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dataSetCount = new javax.swing.JTextField();
        dataSetGenerate = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataSet = new javax.swing.JTextArea();
        linearSearch = new javax.swing.JButton();
        binarySearch = new javax.swing.JButton();
        jumpSearch = new javax.swing.JButton();
        linearSortedSearch = new javax.swing.JButton();
        binarySortedSearch = new javax.swing.JButton();
        jumpSortedSearch = new javax.swing.JButton();
        sortButton = new javax.swing.JButton();
        interpolationSearch = new javax.swing.JButton();
        interpolationSortedSearch = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        linearResult = new javax.swing.JTextField();
        binaryResult = new javax.swing.JTextField();
        interpolationResult = new javax.swing.JTextField();
        jumpResult = new javax.swing.JTextField();
        linearSortedResult = new javax.swing.JTextField();
        binarySortedResult = new javax.swing.JTextField();
        interpolationSortedResult = new javax.swing.JTextField();
        jumpSortedResult = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        searchingElement = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(2, 70, 114));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(dataSetCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 97, 35));

        dataSetGenerate.setBackground(new java.awt.Color(187, 253, 176));
        dataSetGenerate.setText("Generate Random Number set");
        dataSetGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataSetGenerateActionPerformed(evt);
            }
        });
        getContentPane().add(dataSetGenerate, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, 248, 122));

        jLabel1.setText("Count of the dataset");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        dataSet.setColumns(20);
        dataSet.setLineWrap(true);
        dataSet.setRows(5);
        dataSet.setEnabled(false);
        jScrollPane1.setViewportView(dataSet);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 20, 590, 120));

        linearSearch.setText("Linear Search");
        linearSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linearSearchActionPerformed(evt);
            }
        });
        getContentPane().add(linearSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 240, 220, -1));

        binarySearch.setText("Binary Search");
        binarySearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binarySearchActionPerformed(evt);
            }
        });
        getContentPane().add(binarySearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 280, 220, -1));

        jumpSearch.setText("Jump Search");
        jumpSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jumpSearchActionPerformed(evt);
            }
        });
        getContentPane().add(jumpSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 360, 220, -1));

        linearSortedSearch.setText("Sorted Linear Search");
        linearSortedSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linearSortedSearchActionPerformed(evt);
            }
        });
        getContentPane().add(linearSortedSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 400, 220, -1));

        binarySortedSearch.setText("Sorted Binary Search");
        binarySortedSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                binarySortedSearchActionPerformed(evt);
            }
        });
        getContentPane().add(binarySortedSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 440, 220, -1));

        jumpSortedSearch.setText("Jump Search");
        jumpSortedSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jumpSortedSearchActionPerformed(evt);
            }
        });
        getContentPane().add(jumpSortedSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 520, 220, -1));

        sortButton.setText("Sort the dataset");
        sortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortButtonActionPerformed(evt);
            }
        });
        getContentPane().add(sortButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 160, 40));

        interpolationSearch.setText("Interpolation Search");
        interpolationSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interpolationSearchActionPerformed(evt);
            }
        });
        getContentPane().add(interpolationSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 320, 220, -1));

        interpolationSortedSearch.setText("Sorted Interpolation Search");
        interpolationSortedSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interpolationSortedSearchActionPerformed(evt);
            }
        });
        getContentPane().add(interpolationSortedSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 480, 220, -1));

        jPanel1.setBackground(new java.awt.Color(237, 255, 135));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 270, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 220, 270, 350));

        jPanel2.setBackground(new java.awt.Color(252, 186, 237));

        linearResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linearResultActionPerformed(evt);
            }
        });

        interpolationResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interpolationResultActionPerformed(evt);
            }
        });

        linearSortedResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linearSortedResultActionPerformed(evt);
            }
        });

        jLabel3.setText("In Milliseconds");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(linearResult, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(interpolationSortedResult, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jumpSortedResult, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(binarySortedResult, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(linearSortedResult, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jumpResult, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(interpolationResult, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(binaryResult, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(49, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel3))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(linearResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(binaryResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(interpolationResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jumpResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(linearSortedResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(binarySortedResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(interpolationSortedResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jumpSortedResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel3))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 220, 310, 350));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 70, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 570, -1, 70));

        searchingElement.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchingElementFocusLost(evt);
            }
        });
        searchingElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchingElementActionPerformed(evt);
            }
        });
        getContentPane().add(searchingElement, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 180, 120, -1));

        jLabel2.setText("Searching Element");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 180, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public int intArray[];
    public int searchNumber;


    private void dataSetGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataSetGenerateActionPerformed
        dataSet.setText(null);
        int count = Integer.parseInt(dataSetCount.getText());
        System.out.println(count);
        intArray = new int[count];
        Random r = new Random();
        for (int i = 0; i < count; i++) {
            intArray[i] = r.nextInt(100);
        }
        for (int i = 0; i < intArray.length; i++) {
//            System.out.println(intArray[i]);
            dataSet.setText(dataSet.getText() + "  " + String.valueOf(intArray[i]));
        }

//      printSet();
    }//GEN-LAST:event_dataSetGenerateActionPerformed

    private void linearSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linearSearchActionPerformed
        Instant start = Instant.now();

       
        Instant end = Instant.now();
        Duration timeElapsed = Duration.between(start, end);
        linearResult.setText(String.valueOf(timeElapsed.toMillis()));
    }//GEN-LAST:event_linearSearchActionPerformed

    private void linearSortedSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linearSortedSearchActionPerformed
        Instant start = Instant.now();

        Instant end = Instant.now();
        Duration timeElapsed = Duration.between(start, end);
        linearSortedResult.setText(String.valueOf(timeElapsed.toMillis()));
    }//GEN-LAST:event_linearSortedSearchActionPerformed

    private void binarySortedSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binarySortedSearchActionPerformed
        Instant start = Instant.now();

        Instant end = Instant.now();
        Duration timeElapsed = Duration.between(start, end);
        binarySortedResult.setText(String.valueOf(timeElapsed.toMillis()));
    }//GEN-LAST:event_binarySortedSearchActionPerformed

    private void jumpSortedSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jumpSortedSearchActionPerformed
        Instant start = Instant.now();

        Instant end = Instant.now();
        Duration timeElapsed = Duration.between(start, end);
        jumpSortedResult.setText(String.valueOf(timeElapsed.toMillis()));
    }//GEN-LAST:event_jumpSortedSearchActionPerformed

    private void interpolationSortedSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interpolationSortedSearchActionPerformed
        Instant start = Instant.now();

        Instant end = Instant.now();
        Duration timeElapsed = Duration.between(start, end);
        interpolationSortedResult.setText(String.valueOf(timeElapsed.toMillis()));
    }//GEN-LAST:event_interpolationSortedSearchActionPerformed

    private void linearResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linearResultActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_linearResultActionPerformed

    private void interpolationResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interpolationResultActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_interpolationResultActionPerformed

    private void linearSortedResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linearSortedResultActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_linearSortedResultActionPerformed

    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed
        quickSort(intArray, 0, intArray.length - 1);
        dataSet.setText(null);
        for (int i = 0; i < intArray.length; i++) {
//            System.out.println(intArray[i]);
            dataSet.setText(dataSet.getText() + "  " + String.valueOf(intArray[i]));
        }
    }//GEN-LAST:event_sortButtonActionPerformed

    private void searchingElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchingElementActionPerformed

    }//GEN-LAST:event_searchingElementActionPerformed

    private void searchingElementFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchingElementFocusLost
        searchNumber = Integer.parseInt(searchingElement.getText());
        System.out.println(searchNumber);
    }//GEN-LAST:event_searchingElementFocusLost

    private void binarySearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_binarySearchActionPerformed
        Instant start = Instant.now();

        Instant end = Instant.now();
        Duration timeElapsed = Duration.between(start, end);
        binaryResult.setText(String.valueOf(timeElapsed.toMillis()));
    }//GEN-LAST:event_binarySearchActionPerformed

    private void interpolationSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interpolationSearchActionPerformed
        Instant start = Instant.now();

        Instant end = Instant.now();
        Duration timeElapsed = Duration.between(start, end);
        interpolationResult.setText(String.valueOf(timeElapsed.toMillis()));
    }//GEN-LAST:event_interpolationSearchActionPerformed

    private void jumpSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jumpSearchActionPerformed
        Instant start = Instant.now();

        Instant end = Instant.now();
        Duration timeElapsed = Duration.between(start, end);
        jumpResult.setText(String.valueOf(timeElapsed.toMillis()));
    }//GEN-LAST:event_jumpSearchActionPerformed

    public static void quickSort(int[] arr, int low, int high) {
        if (arr == null || arr.length == 0) {
            return;
        }

        if (low >= high) {
            return;
        }

        // pick the pivot
        int middle = low + (high - low) / 2;
        int pivot = arr[middle];

        // make left < pivot and right > pivot
        int i = low, j = high;
        while (i <= j) {
            while (arr[i] < pivot) {
                i++;
            }

            while (arr[j] > pivot) {
                j--;
            }

            if (i <= j) {
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
                i++;
                j--;
            }
        }

        // recursively sort two sub parts
        if (low < j) {
            quickSort(arr, low, j);
        }

        if (high > i) {
            quickSort(arr, i, high);
        }
    }

    private void printSet() {
//        for (int i = 0; i < intArray.length; i++) {
//            System.out.println(intArray[i]);
//        }      
        Instant start = Instant.now();
        for (int i = 0; i < intArray.length; i++) {
//            System.out.println(intArray[i]);
        }
        Instant end = Instant.now();
        Duration timeElapsed = Duration.between(start, end);
        System.out.println("Time taken: " + timeElapsed.toMillis() + " milliseconds");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField binaryResult;
    private javax.swing.JButton binarySearch;
    private javax.swing.JTextField binarySortedResult;
    private javax.swing.JButton binarySortedSearch;
    private javax.swing.JTextArea dataSet;
    private javax.swing.JTextField dataSetCount;
    private javax.swing.JToggleButton dataSetGenerate;
    private javax.swing.JTextField interpolationResult;
    private javax.swing.JButton interpolationSearch;
    private javax.swing.JTextField interpolationSortedResult;
    private javax.swing.JButton interpolationSortedSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jumpResult;
    private javax.swing.JButton jumpSearch;
    private javax.swing.JTextField jumpSortedResult;
    private javax.swing.JButton jumpSortedSearch;
    private javax.swing.JTextField linearResult;
    private javax.swing.JButton linearSearch;
    private javax.swing.JTextField linearSortedResult;
    private javax.swing.JButton linearSortedSearch;
    private javax.swing.JTextField searchingElement;
    private javax.swing.JButton sortButton;
    // End of variables declaration//GEN-END:variables
}
